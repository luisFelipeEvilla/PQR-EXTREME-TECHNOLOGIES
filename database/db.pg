--  Crear base de datos
create database pqrs;

-- conectarse a la base de datos
\c pqrs;

--  Crear tabla de usuarios
CREATE TABLE users(
    id serial PRIMARY KEY,
    email TEXT NOT NULL UNIQUE,
    password VARCHAR(60) NOT NULL,
    fullname VARCHAR(100) NOT NULL,
    phone VARCHAR(18) NOT NULL, 
    admin Boolean DEFAULT FALSE
);

--  Mostrar tabla
SELECT col.table_name,
       col.column_name,
       col.data_type,
       col.column_default
FROM information_schema.columns col
WHERE table_name = 'users';

--  Tabla de pqrs
CREATE TYPE tipo_pqr AS ENUM ('Petición', 'Queja', 'Reclamo');
CREATE TYPE estado_pqr AS ENUM ('Nuevo', 'En ejecución', 'Cerrado');

CREATE TABLE pqrs(
   id SERIAL PRIMARY KEY,
   user_id Int NOT  NULL,
   tipo tipo_pqr NOT NULL,
   asunto TEXT NOT NULL,
   estado estado_pqr NOT NULL DEFAULT 'Nuevo',
   created_at TIMESTAMP DEFAULT now(),
   expired_at TIMESTAMP NOT NULL,
   CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Mostrar tabla pqrs
SELECT col.table_name,
       col.column_name,
       col.data_type,
       col.column_default
FROM information_schema.columns col
WHERE table_name = 'pqrs';

-- Tabla de sesiones
CREATE TABLE "session" (
  "sid" varchar NOT NULL COLLATE "default",
	"sess" json NOT NULL,
	"expire" timestamp(6) NOT NULL
)
WITH (OIDS=FALSE);

ALTER TABLE "session" ADD CONSTRAINT "session_pkey" PRIMARY KEY ("sid") NOT DEFERRABLE INITIALLY IMMEDIATE;

CREATE INDEX "IDX_session_expire" ON "session" ("expire");

-- Tabla de auditoria 
CREATE TYPE accion_crud AS ENUM ('CREATE', 'UPDATE', 'DELETE');

CREATE TABLE auditoria (
  fecha TIMESTAMP NOT NULL,
  usuario_web INTEGER NOT NULL,
  usuario_bd VARCHAR(20) NOT NULL,
  accion accion_crud NOT NULL,
  CONSTRAINT fk_user_web FOREIGN KEY (usuario_web) REFERENCES users(id)
);

CREATE OR REPLACE FUNCTION fn_log_auditar() RETURNS TRIGGER AS 
$auditar_tg$
BEGIN
  IF (TG_OP = 'DELETE') THEN
  INSERT INTO auditoria("fecha", "usuario_web", "usuario_bd", "accion")
    VALUES (NOW(), OLD.user_id, USER, 'DELETE');
    RETURN OLD;
  ELSEIF (TG_OP = 'UPDATE') THEN
    INSERT INTO auditoria("fecha", "usuario_web", "usuario_bd", "accion")
    VALUES (NOW(), NEW.user_id, USER, 'UPDATE');
    RETURN NEW;
  ELSEIF (TG_OP = 'INSERT') THEN
    IF (TG_TABLE_NAME = 'pqrs') THEN
      INSERT INTO auditoria("fecha", "usuario_web", "usuario_bd", "accion")
      VALUES (NOW(), NEW.user_id, USER, 'CREATE');
      RETURN NEW;
    END IF;
  END IF;
  RETURN NULL;
END;
$auditar_tg$ LANGUAGE plpgsql;

CREATE TRIGGER audit_tg AFTER INSERT OR UPDATE OR DELETE
ON pqrs FOR EACH ROW
EXECUTE PROCEDURE  fn_log_auditar();

CREATE TRIGGER audit_tg AFTER INSERT OR UPDATE OR DELETE
ON users FOR EACH ROW
EXECUTE PROCEDURE  fn_log_auditar();
 